{
	"name": "Fusion",
	"fileTypes": [
		"fu"
	],
	"scopeName": "source.fu",
	"patterns": [
		{
			"include": "#preprocessor"
		},
		{
			"include": "#comment"
		},
		{
			"include": "#storage-modifier"
		},
		{
			"include": "#enum-declaration"
		},
		{
			"include": "#class-declaration"
		},
		{
			"include": "#native-statement"
		},
		{
			"include": "#type"
		},
		{
			"include": "#method-declaration"
		}
	],
	"repository": {
		"enum-declaration": {
			"begin": "(?=\\benum\\b)",
			"end": "(?<=\\})",
			"patterns": [
				{
					"begin": "(?=enum)",
					"end": "(?=\\{)",
					"patterns": [
						{
							"include": "#preprocessor"
						},
						{
							"include": "#comment"
						},
						{
							"match": "(enum)\\s*\\*?\\s+([A-Z][0-9A-Za-z_]*)",
							"captures": {
								"1": {
									"name": "keyword.other.enum.fu"
								},
								"2": {
									"name": "entity.name.type.enum.fu"
								}
							}
						}
					]
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.curlybrace.open.fu"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.curlybrace.close.fu"
						}
					},
					"patterns": [
						{
							"include": "#preprocessor"
						},
						{
							"include": "#comment"
						},
						{
							"include": "#punctuation-comma"
						},
						{
							"begin": "[A-Z][0-9A-Za-z_]*",
							"beginCaptures": {
								"0": {
									"name": "entity.name.variable.enum-member.fu"
								}
							},
							"end": "(?=(,|\\}))",
							"patterns": [
								{
									"include": "#preprocessor"
								},
								{
									"include": "#comment"
								},
								{
									"include": "#initializer"
								}
							]
						}
					]
				},
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				}
			]
		},
		"class-declaration": {
			"begin": "(?=\\b(?:static|abstract|sealed|class)\\b)",
			"end": "(?<=\\})",
			"patterns": [
				{
					"begin": "\\b(?:(static|abstract|sealed)\\s+)?(class)\\s+([A-Z][0-9A-Za-z_]*)\\s*(?:(:)\\s*[A-Z][0-9A-Za-z_]*)?",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.fu"
						},
						"2": {
							"name": "keyword.other.class.fu"
						},
						"3": {
							"name": "entity.name.type.class.fu"
						},
						"4": {
							"name": "punctuation.separator.colon.fu"
						}
					},
					"end": "(?=\\{)",
					"patterns": [
						{
							"include": "#preprocessor"
						},
						{
							"include": "#comment"
						}
					]
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.curlybrace.open.fu"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.curlybrace.close.fu"
						}
					},
					"patterns": [
						{
							"include": "#preprocessor"
						},
						{
							"include": "#comment"
						},
						{
							"include": "#storage-modifier"
						},
						{
							"include": "#type"
						},
						{
							"include": "#field"
						},
						{
							"include": "#initializer"
						},
						{
							"include": "#method-declaration"
						}
					]
				},
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				}
			]
		},
		"storage-modifier": {
			"name": "storage.modifier.fu",
			"match": "\\b(internal|protected|public|static|abstract|virtual|override|sealed|const)\\b"
		},
		"field": {
			"match": "([A-Z][0-9A-Za-z_]*)(?=\\s*[=;])",
			"captures": {
				"0": {
					"name": "entity.name.variable.field.fu"
				}
			}
		},
		"method-declaration": {
			"begin": "([A-Z][0-9A-Za-z_]*)!?(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.fu"
				}
			},
			"end": "(?<=\\})|;",
			"patterns": [
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.open.fu"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.close.fu"
						}
					},
					"patterns": [
						{
							"include": "#preprocessor"
						},
						{
							"include": "#comment"
						},
						{
							"include": "#type"
						},
						{
							"include": "#parameter"
						},
						{
							"include": "#initializer"
						},
						{
							"include": "#punctuation-comma"
						}
					]
				},
				{
					"begin": "\\bthrows\\b",
					"beginCaptures": {
						"0": {
							"name": "keyword.other.throws.fu"
						}
					},
					"end": "(?=[{;])",
					"patterns": [
						{
							"include": "#preprocessor"
						},
						{
							"include": "#comment"
						},
						{
							"name": "entity.name.type.class.fu",
							"match": "[A-Z][0-9A-Za-z_]*"
						},
						{
							"include": "#punctuation-comma"
						}
					]
				},
				{
					"include": "#expression-body"
				},
				{
					"include": "#block"
				}
			]
		},
		"parameter": {
			"match": "([a-z][0-9A-Za-z_]*)(?=\\s*[=,)])",
			"captures": {
				"0": {
					"name": "entity.name.variable.parameter.fu"
				}
			}
		},
		"statement": {
			"patterns": [
				{
					"include": "#assert-statement"
				},
				{
					"include": "#break-statement"
				},
				{
					"include": "#continue-statement"
				},
				{
					"include": "#do-statement"
				},
				{
					"include": "#for-statement"
				},
				{
					"include": "#foreach-statement"
				},
				{
					"include": "#if-statement"
				},
				{
					"include": "#else-statement"
				},
				{
					"include": "#lock-statement"
				},
				{
					"include": "#native-statement"
				},
				{
					"include": "#return-statement"
				},
				{
					"include": "#switch-statement"
				},
				{
					"include": "#throw-statement"
				},
				{
					"include": "#while-statement"
				},
				{
					"include": "#block"
				},
				{
					"include": "#local-constant-declaration"
				},
				{
					"include": "#type"
				},
				{
					"include": "#initializer"
				},
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"assert-statement": {
			"begin": "\\bassert\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.assert.fu"
				}
			},
			"end": "(?=;)",
			"patterns": [
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"break-statement": {
			"match": "\\bbreak\\b",
			"captures": {
				"0": {
					"name": "keyword.control.flow.break.fu"
				}
			}
		},
		"continue-statement": {
			"match": "\\bcontinue\\b",
			"captures": {
				"0": {
					"name": "keyword.control.flow.continue.fu"
				}
			}
		},
		"do-statement": {
			"begin": "\\bdo\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.loop.do.fu"
				}
			},
			"end": "(?=;|})",
			"patterns": [
				{
					"include": "#statement"
				}
			]
		},
		"for-statement": {
			"begin": "\\b(for)\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.loop.for.fu"
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.open.fu"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.close.fu"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						},
						{
							"include": "#type"
						},
						{
							"include": "#punctuation-semicolon"
						}
					]
				},
				{
					"include": "#statement"
				}
			]
		},
		"foreach-statement": {
			"begin": "\\b(foreach)\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.loop.foreach.fu"
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.open.fu"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.close.fu"
						}
					},
					"patterns": [
						{
							"include": "#type"
						},
						{
							"name": "keyword.control.loop.in.fu",
							"match": "\\bin\\b"
						},
						{
							"include": "#expression"
						}
					]
				},
				{
					"include": "#statement"
				}
			]
		},
		"if-statement": {
			"begin": "\\b(if)\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.conditional.if.fu"
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.open.fu"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.close.fu"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"include": "#statement"
				}
			]
		},
		"else-statement": {
			"begin": "\\belse\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.conditional.else.fu"
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"include": "#statement"
				}
			]
		},
		"lock-statement": {
			"begin": "\\b(lock)\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.lock.fu"
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.open.fu"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.close.fu"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"include": "#statement"
				}
			]
		},
		"native-statement": {
			"begin": "\\bnative\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.other.native.fu"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#native-block"
				}
			]
		},
		"native-block": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.curlybrace.open.fu"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.curlybrace.close.fu"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#literal"
				},
				{
					"include": "#native-block"
				}
			]
		},
		"return-statement": {
			"begin": "\\breturn\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.flow.return.fu"
				}
			},
			"end": "(?=;)",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"switch-statement": {
			"begin": "\\b(switch)\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.switch.fu"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.open.fu"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.close.fu"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.curlybrace.open.fu"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.curlybrace.close.fu"
						}
					},
					"patterns": [
						{
							"include": "#switch-label"
						},
						{
							"include": "#statement"
						}
					]
				}
			]
		},
		"switch-label": {
			"patterns": [
				{
					"begin": "\\b(case)\\s+",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.case.fu"
						}
					},
					"end": ":",
					"endCaptures": {
						"0": {
							"name": "punctuation.separator.colon.fu"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						},
						{
							"include": "#switch-when-clause"
						}
					]
				},
				{
					"match": "\\b(default)\\s*(:)",
					"captures": {
						"1": {
							"name": "keyword.control.default.fu"
						},
						"2": {
							"name": "punctuation.separator.colon.fu"
						}
					}
				}
			]
		},
		"switch-when-clause": {
			"match": "\\bwhen\\b",
			"captures": {
				"0": {
					"name": "keyword.control.when.fu"
				}
			}
		},
		"throw-statement": {
			"begin": "\\b(throw)\\s+([A-Z][0-9A-Za-z_]*)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.flow.throw.fu"
				},
				"2": {
					"name": "entity.name.type.class.fu"
				},
				"3": {
					"name": "punctuation.parenthesis.open.fu"
				}
			},
			"end": "\\)?(?=;)",
			"endCaptures": {
				"0": {
					"name": "punctuation.parenthesis.close.fu"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"while-statement": {
			"begin": "\\b(while)\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.loop.while.fu"
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.open.fu"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.close.fu"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"include": "#statement"
				}
			]
		},
		"block": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.curlybrace.open.fu"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.curlybrace.close.fu"
				}
			},
			"patterns": [
				{
					"include": "#statement"
				}
			]
		},
		"local-constant-declaration": {
			"begin": "\\bconst\\b",
			"beginCaptures": {
				"0": {
					"name": "storage.modifier.fu"
				}
			},
			"end": "(?=;)",
			"patterns": [
				{
					"name": "entity.name.variable.local.fu",
					"match": "@?[_[:alpha:]][_[:alnum:]]*"
				},
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#type"
				},
				{
					"include": "#initializer"
				}
			]
		},
		"initializer": {
			"begin": "(?<!=|!)=(?!=|>)",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.assignment.fu"
				}
			},
			"end": "(?=[,);}])",
			"patterns": [
				{
					"include": "#expression"
				},
				{
					"include": "#aggregate-initializer"
				}
			]
		},
		"aggregate-initializer": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.curlybrace.open.fu"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.curlybrace.close.fu"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"expression-body": {
			"begin": "=>",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.arrow.fu"
				}
			},
			"end": "(?=;)",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"type": {
			"name": "meta.type.fu",
			"patterns": [
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#type-builtin"
				},
				{
					"include": "#class-builtin"
				},
				{
					"include": "#type-storage-suffix"
				},
				{
					"include": "#type-array-suffix"
				}
			]
		},
		"type-builtin": {
			"match": "\\b(bool|byte|double|float|int|long|nint|sbyte|short|string|uint|ulong|ushort|void)\\b",
			"captures": {
				"1": {
					"name": "keyword.type.fu"
				}
			}
		},
		"class-builtin": {
			"match": "\\b(Console|Convert|Dictionary|Encoding|Environment|Exception|HashSet|JsonElement|List|Lock|Match|Math|Regex|RegexOptions|SortedDictionary|SortedSet|Stack|StringWriter|TextWriter)\\b",
			"captures": {
				"1": {
					"name": "support.class.fu"
				}
			}
		},
		"type-arguments": {
			"begin": "<",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.typeparameters.begin.fu"
				}
			},
			"end": ">",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.typeparameters.end.fu"
				}
			},
			"patterns": [
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#type"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"type-storage-suffix": {
			"match": "(\\()\\s*(\\))",
			"captures": {
				"1": {
					"name": "punctuation.parenthesis.open.fu"
				},
				"2": {
					"name": "punctuation.parenthesis.close.fu"
				}
			}
		},
		"type-array-suffix": {
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.squarebracket.open.fu"
				}
			},
			"end": "(\\])\\s*([!#])?",
			"endCaptures": {
				"1": {
					"name": "punctuation.squarebracket.close.fu"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"expression": {
			"patterns": [
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#new-expression"
				},
				{
					"include": "#resource-expression"
				},
				{
					"include": "#expression-operators"
				},
				{
					"include": "#base-expression"
				},
				{
					"include": "#this-expression"
				},
				{
					"include": "#literal"
				}
			]
		},
		"new-expression": {
			"begin": "\\bnew\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.other.new.fu"
				}
			},
			"end": "(?=[;,)])",
			"patterns": [
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#type"
				},
				{
					"include": "#aggregate-initializer"
				}
			]
		},
		"resource-expression": {
			"begin": "\\b(resource)\\s*(<)\\s*(byte)\\s*(\\[)\\s*(\\])\\s*(>)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.resource.fu"
				},
				"2": {
					"name": "punctuation.definition.typeparameters.begin.fu"
				},
				"3": {
					"name": "keyword.type.fu"
				},
				"4": {
					"name": "punctuation.squarebracket.open.fu"
				},
				"5": {
					"name": "punctuation.squarebracket.close.fu"
				},
				"6": {
					"name": "punctuation.definition.typeparameters.end.fu"
				},
				"7": {
					"name": "punctuation.parenthesis.open.fu"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.close.fu"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"expression-operators": {
			"patterns": [
				{
					"name": "keyword.operator.assignment.compound.fu",
					"match": "[-+*/%]="
				},
				{
					"name": "keyword.operator.assignment.compound.bitwise.fu",
					"match": "[&|^]=|<<=|>>="
				},
				{
					"name": "keyword.operator.bitwise.shift.fu",
					"match": "<<|>>"
				},
				{
					"name": "keyword.operator.comparison.fu",
					"match": "==|!="
				},
				{
					"name": "keyword.operator.relational.fu",
					"match": "<=|>=|<|>"
				},
				{
					"name": "keyword.operator.logical.fu",
					"match": "\\!|&&|\\|\\|"
				},
				{
					"name": "keyword.operator.bitwise.fu",
					"match": "~|\\&|\\||\\^"
				},
				{
					"name": "keyword.operator.assignment.fu",
					"match": "\\="
				},
				{
					"name": "keyword.operator.decrement.fu",
					"match": "--"
				},
				{
					"name": "keyword.operator.increment.fu",
					"match": "\\+\\+"
				},
				{
					"name": "keyword.operator.arithmetic.fu",
					"match": "[-+*/%]"
				},
				{
					"name": "keyword.operator.expression.pattern.is.fu",
					"match": "\\bis\\b"
				}
			]
		},
		"base-expression": {
			"match": "\\bbase\\b",
			"captures": {
				"0": {
					"name": "keyword.other.base.fu"
				}
			}
		},
		"this-expression": {
			"match": "\\bthis\\b",
			"captures": {
				"0": {
					"name": "keyword.other.this.fu"
				}
			}
		},
		"literal": {
			"patterns": [
				{
					"include": "#boolean-literal"
				},
				{
					"include": "#null-literal"
				},
				{
					"include": "#char-literal"
				},
				{
					"include": "#string-literal"
				}
			]
		},
		"boolean-literal": {
			"patterns": [
				{
					"name": "constant.language.boolean.true.fu",
					"match": "\\btrue\\b"
				},
				{
					"name": "constant.language.boolean.false.fu",
					"match": "\\bfalse\\b"
				}
			]
		},
		"null-literal": {
			"name": "constant.language.null.fu",
			"match": "\\bnull\\b"
		},
		"char-literal": {
			"name": "string.quoted.single.fu",
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.char.begin.fu"
				}
			},
			"end": "(')|((?:[^\\\\\\n])$)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.char.end.fu"
				},
				"2": {
					"name": "invalid.illegal.newline.fu"
				}
			},
			"patterns": [
				{
					"include": "#char-character-escape"
				}
			]
		},
		"string-literal": {
			"name": "string.quoted.double.fu",
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.fu"
				}
			},
			"end": "(\")|((?:[^\\\\\\n])$)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.fu"
				},
				"2": {
					"name": "invalid.illegal.newline.fu"
				}
			},
			"patterns": [
				{
					"include": "#char-character-escape"
				}
			]
		},
		"char-character-escape": {
			"name": "constant.character.escape.fu",
			"match": "\\\\(['\"\\\\0abfnrtv])"
		},
		"punctuation-comma": {
			"name": "punctuation.separator.comma.fu",
			"match": ","
		},
		"punctuation-semicolon": {
			"name": "punctuation.terminator.statement.fu",
			"match": ";"
		},
		"preprocessor": {
			"name": "meta.preprocessor.fu",
			"begin": "^\\s*(#)\\s*",
			"beginCaptures": {
				"1": {
					"name": "punctuation.separator.hash.fu"
				}
			},
			"end": "(?<=$)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#preprocessor-if-or-elif"
				},
				{
					"include": "#preprocessor-else"
				},
				{
					"include": "#preprocessor-endif"
				}
			]
		},
		"preprocessor-if-or-elif": {
			"begin": "\\b(?:(if)|(elif))\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.preprocessor.if.fu"
				},
				"2": {
					"name": "keyword.preprocessor.elif.fu"
				}
			},
			"end": "(?=$)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#preprocessor-expression"
				}
			]
		},
		"preprocessor-else": {
			"match": "\\belse\\b",
			"captures": {
				"0": {
					"name": "keyword.preprocessor.else.fu"
				}
			}
		},
		"preprocessor-endif": {
			"match": "\\bendif\\b",
			"captures": {
				"0": {
					"name": "keyword.preprocessor.endif.fu"
				}
			}
		},
		"preprocessor-expression": {
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.open.fu"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.close.fu"
						}
					},
					"patterns": [
						{
							"include": "#preprocessor-expression"
						}
					]
				},
				{
					"match": "\\b(?:(true)|(false)|([A-Za-z_][0-9A-Za-z_]*))\\b",
					"captures": {
						"1": {
							"name": "constant.language.boolean.true.fu"
						},
						"2": {
							"name": "constant.language.boolean.false.fu"
						},
						"3": {
							"name": "entity.name.variable.preprocessor.symbol.fu"
						}
					}
				},
				{
					"match": "!|&&|\\|\\|",
					"captures": {
						"0": {
							"name": "keyword.operator.logical.fu"
						}
					}
				},
				{
					"match": "[=!]=",
					"captures": {
						"0": {
							"name": "keyword.operator.comparison.fu"
						}
					}
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.block.fu",
					"begin": "/\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.fu"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.fu"
						}
					}
				},
				{
					"begin": "(^\\s+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.fu"
						}
					},
					"end": "(?=$)",
					"patterns": [
						{
							"name": "comment.block.documentation.fu",
							"begin": "(?<!/)///(?!/)",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.fu"
								}
							},
							"end": "(?=$)"
						},
						{
							"name": "comment.line.double-slash.fu",
							"begin": "(?<!/)//(?:(?!/)|(?=//))",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.fu"
								}
							},
							"end": "(?=$)"
						}
					]
				}
			]
		}
	}
}
